export const dynamic = "force-dynamic";

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "react-hot-toast";
import { Suspense } from "react";
import LoadingPage from "@components/Organisms/Loading";
import { getServerSession } from "next-auth";
import { authOptions } from "@lib/authOptions";
import Header from "@components/Organisms/Header";
import userService from "@services/user";
import { IUser } from "@models/user/common.model";
import { IUserResponse } from "@models/user/response.model";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getAUser(id: string) {
  try {
    const response = await userService.getAUser(id);
    console.log("API response:", response);
    return response || { data: null };
  } catch (error) {
    console.error("Error fetching user:", error);
    return { data: null };
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getServerSession(authOptions) as METADATA.ISession;
  let userData: IUser | undefined;
  if (session?.user?.id) {
    const user = await getAUser(session.user.id) as IUserResponse;
    userData = user?.data as IUser | undefined;
  }

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Toaster />
        <Suspense fallback={<LoadingPage />}>
          <Header user={userData} />
          {children}
        </Suspense>
      </body>
    </html>
  );
}