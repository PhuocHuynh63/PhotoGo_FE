'use client';

import React, { useState, useRef, useEffect } from 'react';
import clsx from 'clsx';
import styles from './index.module.scss';
import ChatHeader from '@components/Atoms/ChatBotHeader';
import ChatMessages from '@components/Atoms/ChatMessage';
import ChatInput from '@components/Atoms/ChatInput';
import ChatToggle from '@components/Atoms/ChatBotToogle';

const botResponses = [
    "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! L√†m th·∫ø n√†o t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n?",
    "ƒê√≥ l√† m·ªôt c√¢u h·ªèi th√∫ v·ªã! T√¥i s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n.",
    "T√¥i hi·ªÉu r·ªìi. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi ti·∫øt kh√¥ng?",
    "Tuy·ªát v·ªùi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi ƒëi·ªÅu ƒë√≥.",
    "ƒê√≥ l√† m·ªôt √Ω t∆∞·ªüng hay! H√£y c√πng th·∫£o lu·∫≠n th√™m.",
    "T√¥i ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t...",
    "R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n! üòä"
];

const Chatbot = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        { id: 1, text: "Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? ü§ñ", sender: 'bot' }
    ]);
    const [inputValue, setInputValue] = useState('');
    const [selectedFile, setSelectedFile] = useState(null);
    const [isTyping, setIsTyping] = useState(false);
    const chatContainerRef = useRef<HTMLDivElement | null>(null);
    const messagesEndRef = useRef<HTMLDivElement | null>(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(scrollToBottom, [messages, isTyping]);

    // Click outside to close
    useEffect(() => {
        const handleClickOutside = (event: any) => {
            if (isOpen && chatContainerRef.current && !chatContainerRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [isOpen]);

    const handleToggleChat = () => setIsOpen(prev => !prev);

    const handleFileChange = (e: any) => {
        if (e.target.files && e.target.files[0]) {
            setSelectedFile(e.target.files[0]);
        }
    }

    const handleSendMessage = () => {
        const text = inputValue.trim();
        if (!text && !selectedFile) return;

        const newMessage = {
            id: Date.now(),
            sender: 'user',
            text: text,
            imageUrl: selectedFile ? URL.createObjectURL(selectedFile) : null
        };

        setMessages(prev => [...prev, newMessage]);
        setInputValue('');
        setSelectedFile(null);

        // Simulate bot response
        setIsTyping(true);
        setTimeout(() => {
            setIsTyping(false);
            const botResponse = {
                id: Date.now() + 1,
                sender: 'bot',
                text: botResponses[Math.floor(Math.random() * botResponses.length)]
            };
            setMessages(prev => [...prev, botResponse]);
        }, 1500 + Math.random() * 1000);
    };

    return (
        <div ref={chatContainerRef} className={clsx(
            // Mobile (m·∫∑c ƒë·ªãnh): Container l√† m·ªôt d·∫£i n·∫±m ngang ·ªü d∆∞·ªõi, c√°ch l·ªÅ 2 b√™n
            'fixed z-[1000] bottom-0 left-5 right-5',
            // CƒÉn ch·ªânh c√°c ph·∫ßn t·ª≠ con (n√∫t, c·ª≠a s·ªï) v·ªÅ ph√≠a b√™n ph·∫£i c·ªßa container
            'flex flex-col items-end',
            // Desktop (md v√† l·ªõn h∆°n): Thu l·∫°i th√†nh m·ªôt box nh·ªè ·ªü g√≥c ph·∫£i d∆∞·ªõi
            'md:bottom-5 md:left-auto md:w-auto'
        )}>
            {/* Chat Window */}
            <div className={clsx(
                styles.chatWindow,
                'absolute bottom-[80px] w-full h-[500px] rounded-2xl shadow-2xl overflow-hidden border border-white/30 flex flex-col',
                'md:w-[350px] md:left-auto md:right-0',
                { [styles.active]: isOpen }
            )}>
                <ChatHeader />
                <ChatMessages ref={messagesEndRef} messages={messages} isTyping={isTyping} />
                <ChatInput
                    value={inputValue}
                    onChange={(e: any) => setInputValue(e.target.value)}
                    onSend={handleSendMessage}
                    onFileChange={handleFileChange}
                    selectedFile={selectedFile}
                />
            </div>
            {/* Toggle Button */}
            <ChatToggle onClick={handleToggleChat} />
        </div>
    );
};

export default Chatbot;